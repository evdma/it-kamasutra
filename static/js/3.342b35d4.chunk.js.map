{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","descriptionBlock","mainPhoto","contact","controlsBtn","postsBlock","newPost","posts","item","like","Post","props","react_default","a","createElement","className","classes","key","id","src","alt","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","memo","postElements","map","post","MyPosts_Post_Post","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","reduxForm","form","handleSubmit","Field","validate","required","component","Textarea","name","placeholder","Button","variant","type","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useEffect","setStatus","status","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","_useState4","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileDataFormReduxForm","_ref","profile","error","styles","formSummaryError","createField","Input","keys","contacts","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullname","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo_Contact","contactTitle","contactValue","Contact","_ref3","ProfileInfo","savePhoto","saveProfile","Preloader","photos","large","userPhoto","target","files","length","ProfileInfo_ProfileDataForm","initialValues","formData","then","ProfileInfo_ProfileData","ProfileInfo_ProfileStatusWithHooks","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","components_Profile_Profile","assign","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.342b35d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2MyrB\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3CtQa\",\"contact\":\"ProfileInfo_contact__3w_xN\",\"controlsBtn\":\"ProfileInfo_controlsBtn__2ApFJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1luRg\",\"newPost\":\"MyPosts_newPost__2yPmJ\",\"posts\":\"MyPosts_posts__1sp96\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2dbZa\",\"like\":\"Post_like__32xt5\"};","import React from 'react';\r\nimport classes from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (<div className={classes.item} key={props.id}>\r\n        <img src=\"https://pixel.nymag.com/imgs/daily/vulture/2018/11/02/02-avatar-2.w700.h700.jpg\" alt=\"\" />\r\n        {props.message}\r\n        <div>\r\n            <span>like <span className={classes.like}>{props.likesCount}</span></span>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nlet maxLength10 = maxLengthCreator(10);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n\r\n    let postElements = props.posts.map(post => <Post key={post.id} id={post.id} message={post.message} likesCount={post.likesCount} />);\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (<div className={classes.postsBlock}>\r\n        <h3>My Posts</h3>\r\n        <AddNewPostFormRedux onSubmit={onAddPost} />\r\n        <div className={classes.posts}>\r\n            {postElements}\r\n        </div>\r\n    </div>)\r\n});\r\n\r\n// class MyPosts extends PureComponent {\r\n\r\n//     shouldComponentUpdate(nextProps, nextState) {\r\n//         return nextProps != this.props || nextState != this.state;\r\n//     }\r\n\r\n//     render() {\r\n//         let postElements = this.props.posts.map(post => <Post key={post.id} id={post.id} message={post.message} likesCount={post.likesCount} />);\r\n\r\n//         let onAddPost = (values) => {\r\n//             this.props.addPost(values.newPostText);\r\n//         }\r\n\r\n//         return (<div className={classes.postsBlock}>\r\n//             <h3>My Posts</h3>\r\n//             <AddNewPostFormRedux onSubmit={onAddPost} />\r\n//             <div className={classes.posts}>\r\n//                 {postElements}\r\n//             </div>\r\n//         </div>)\r\n//     }\r\n// }\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={classes.newPost} >\r\n            <div>\r\n                <Field validate={[required, maxLength10]} component={Textarea}\r\n                    name=\"newPostText\" placeholder=\"Post message\" />\r\n            </div>\r\n            <div>\r\n                <Button variant=\"primary\" type=\"submit\">Add post</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({ form: 'ProfileAddNewPostForm' })(AddNewPostForm);\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer'\r\nimport MyPosts from './MyPosts'\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, { useState, useEffect } from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (<div>\r\n        {!editMode && <div>\r\n            <b>Status</b>:\r\n            <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n        </div>}\r\n        {editMode &&\r\n            <div>\r\n                <input autoFocus={true}\r\n                    onChange={onStatusChange} onBlur={deactivateEditMode} value={status}\r\n                />\r\n            </div>}\r\n    </div>)\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react';\r\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { reduxForm } from 'redux-form';\r\nimport classes from './ProfileInfo.module.css';\r\nimport styles from '../../common/FormsControls/FormControls.module.css';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Button variant=\"success\" type=\"submit\" className={classes.controlsBtn}>save</Button>\r\n            </div>\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Fullname</b>: {createField(\"Full name\", \"fullname\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key =>\r\n                    <div key={key} className={classes.contacts}>\r\n                        <b>{key}:</b> {createField(key, \"contacts.\" + key, [], Input)}\r\n                    </div>)}\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React, { useState } from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (<div>\r\n        <div className={classes.descriptionBlock}>\r\n            <img src={profile.photos.large || userPhoto}\r\n                className={classes.mainPhoto} alt=\"\" />\r\n            {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} className={classes.controlsBtn} />}\r\n            {editMode\r\n                ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => { setEditMode(true) }} />\r\n            }\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                {isOwner && <Button variant=\"primary\" onClick={goToEditMode} className={classes.controlsBtn}>edit</Button>}\r\n            </div>\r\n            <div>\r\n                <b>Fullname</b>: {profile.fullname}\r\n            </div>\r\n            <div>\r\n                Looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key =>\r\n                    <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return <div className={classes.contact}><b>{contactTitle}</b>:{contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile = (props) => {\r\n    return (<div>\r\n        <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile} />\r\n        <MyPostsContainer />\r\n    </div>)\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                saveProfile={this.props.saveProfile} />\r\n        </div>)\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter\r\n)(ProfileContainer);"],"sourceRoot":""}