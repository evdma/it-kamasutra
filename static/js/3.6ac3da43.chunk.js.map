{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","descriptionBlock","mainPhoto","contact","postsBlock","posts","item","Post","props","react_default","a","createElement","className","classes","key","id","src","alt","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","memo","postElements","map","post","MyPosts_Post_Post","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","reduxForm","form","handleSubmit","Field","validate","required","component","Textarea","name","placeholder","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useEffect","setStatus","status","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","_useState4","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileDataFormReduxForm","_ref","profile","error","styles","formSummaryError","createField","Input","type","keys","contacts","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullname","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo_Contact","contactTitle","contactValue","Contact","_ref3","ProfileInfo","savePhoto","saveProfile","Preloader","photos","large","userPhoto","target","files","length","ProfileInfo_ProfileDataForm","initialValues","formData","then","ProfileInfo_ProfileData","ProfileInfo_ProfileStatusWithHooks","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","components_Profile_Profile","assign","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.6ac3da43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__241WH\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1WMep\",\"contact\":\"ProfileInfo_contact__3X-NG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3_gu5\",\"posts\":\"MyPosts_posts__U6U52\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3SDK0\"};","import React from 'react';\r\nimport classes from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (<div className={classes.item} key={props.id}>\r\n        <img src=\"https://pixel.nymag.com/imgs/daily/vulture/2018/11/02/02-avatar-2.w700.h700.jpg\" alt=\"\" />\r\n        {props.message}\r\n            <div>\r\n            <span>like {props.likesCount}</span>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nlet maxLength10 = maxLengthCreator(10);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n\r\n    let postElements = props.posts.map(post => <Post key={post.id} id={post.id} message={post.message} likesCount={post.likesCount} />);\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (<div className={classes.postsBlock}>\r\n        <h3>My Posts</h3>\r\n        <AddNewPostFormRedux onSubmit={onAddPost} />\r\n        <div className={classes.posts}>\r\n            {postElements}\r\n        </div>\r\n    </div>)\r\n});\r\n\r\n// class MyPosts extends PureComponent {\r\n\r\n//     shouldComponentUpdate(nextProps, nextState) {\r\n//         return nextProps != this.props || nextState != this.state;\r\n//     }\r\n\r\n//     render() {\r\n//         let postElements = this.props.posts.map(post => <Post key={post.id} id={post.id} message={post.message} likesCount={post.likesCount} />);\r\n\r\n//         let onAddPost = (values) => {\r\n//             this.props.addPost(values.newPostText);\r\n//         }\r\n\r\n//         return (<div className={classes.postsBlock}>\r\n//             <h3>My Posts</h3>\r\n//             <AddNewPostFormRedux onSubmit={onAddPost} />\r\n//             <div className={classes.posts}>\r\n//                 {postElements}\r\n//             </div>\r\n//         </div>)\r\n//     }\r\n// }\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field validate={[required, maxLength10]} component={Textarea}\r\n                    name=\"newPostText\" placeholder=\"Post message\" />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({ form: 'ProfileAddNewPostForm' })(AddNewPostForm);\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer'\r\nimport MyPosts from './MyPosts'\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, { useState, useEffect } from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (<div>\r\n        {!editMode && <div>\r\n            <b>Status</b>:\r\n            <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n        </div>}\r\n        {editMode &&\r\n            <div>\r\n                <input autoFocus={true}\r\n                    onChange={onStatusChange} onBlur={deactivateEditMode} value={status}\r\n                />\r\n            </div>}\r\n    </div>)\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react';\r\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { reduxForm } from 'redux-form';\r\nimport classes from './ProfileInfo.module.css';\r\nimport styles from '../../common/FormsControls/FormControls.module.css';\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Fullname</b>: {createField(\"Full name\", \"fullname\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key =>\r\n                    <div key={key} className={classes.contacts}>\r\n                        <b>{key}:</b> {createField(key, \"contacts.\" + key, [], Input)}\r\n                    </div>)}\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React, { useState } from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (<div>\r\n        <div className={classes.descriptionBlock}>\r\n            <img src={profile.photos.large || userPhoto}\r\n                className={classes.mainPhoto} alt=\"\" />\r\n            {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n            {editMode\r\n                ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => { setEditMode(true) }} />\r\n            }\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                {isOwner && <button onClick={goToEditMode}>edit</button>}\r\n            </div>\r\n            <div>\r\n                <b>Fullname</b>: {profile.fullname}\r\n            </div>\r\n            <div>\r\n                Looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key =>\r\n                    <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return <div className={classes.contact}><b>{contactTitle}</b>:{contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile = (props) => {\r\n    return (<div>\r\n        <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile} />\r\n        <MyPostsContainer />\r\n    </div>)\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                saveProfile={this.props.saveProfile} />\r\n        </div>)\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter\r\n)(ProfileContainer);"],"sourceRoot":""}